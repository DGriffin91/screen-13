// NOTE: This program is intended to help "inflate" model vertex buffers which have been read from
// disk or the network. We do not store normal or tangent in the asset .pak file, so these
// attributes must be reconstructed at runtime; prior to rendering use.

#version 450

const STRIDE_IN = 15;
const STRIDE_OUT = 36;

struct Vertex {
    vec3 position;
    vec2 texcoord;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    layout(offset = 0) uint offset;
} push_constants;

layout(set = 0, binding = 0, std430) restrict readonly buffer SrcBuffer {
    float src_buf[];
};

layout(set = 0, binding = 1, std430) buffer DstBuffer {
    float dst_buf[];
};

Vertex read(uint idx) {
    float x = src_buf[idx];
    float y = src_buf[++idx];
    float z = src_buf[++idx];
    float u = src_buf[++idx];
    float v = src_buf[++idx];
    vec3 position = vec3(x, y, z);
    vec2 texcoord = vec2(u, v);

    return Vertex(position, texcoord);
}

void write(uint idx, Vertex vertex, vec3 normal, vec4 tangent) {
    dst_buf[idx] = vertex.position.x;
    dst_buf[++idx] = vertex.position.y;
    dst_buf[++idx] = vertex.position.z;
    dst_buf[++idx] = normal.x;
    dst_buf[++idx] = normal.y;
    dst_buf[++idx] = normal.z;
    dst_buf[++idx] = tangent.x;
    dst_buf[++idx] = tangent.y;
    dst_buf[++idx] = tangent.z;
    dst_buf[++idx] = tangent.w;
    dst_buf[++idx] = vertex.texcoord.x;
    dst_buf[++idx] = vertex.texcoord.y;
}

void main() {
    // Read three vertices of a triangle from the source
    uint src_idx = push_constants.offset + gl_GlobalInvocationID.x * STRIDE_IN;
    Vertex v1 = read(src_idx);
    Vertex v2 = read(src_idx + 5);
    Vertex v3 = read(src_idx + 10);

    // Calculate the normal of the front face of this triangle
    vec3 normal = vec3(0);

    // Calculate the four-component tangent (with handedness)
    vec3 p2 = v2.position - v1.position;
    vec3 p3 = v3.position - v1.position;
    vec2 st2 = v2.texcoord - v1.texcoord;
    vec2 st3 = v3.texcoord - v1.texcoord;
    float r = 1 / (st2.x * st3.y - st3.x * st2.y);
    vec4 tangent = vec4(0);

    // Write the (larger) output vertices for one triangle
    uint dst_idx = push_constants.offset + gl_GlobalInvocationID.x * STRIDE_OUT;
    write(dst_idx, v1, normal, tangent);
    write(dst_idx + 12, v2, normal, tangent);
    write(dst_idx + 24, v3, normal, tangent);
}
