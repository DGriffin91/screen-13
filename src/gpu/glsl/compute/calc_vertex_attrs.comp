#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform CCCCCCCCPushConstants {
    layout(offset = 0) uint stride;
} push_constants;

layout(set = 0, binding = 0, std430) buffer XXXXXVertexBuffer {
    uint vertex_buf[];
};

void main() {
    // uint index = 3 * gl_GlobalInvocationID.x + push_constants.stride * gl_GlobalInvocationID.y;

    // uint pixels[3];
    // pixels[0] = pixel_buffer[index];
    // pixels[1] = pixel_buffer[++index];
    // pixels[2] = pixel_buffer[++index];

    // int x4 = int(gl_GlobalInvocationID.x) << 2;
    // int y = imageSize(image).y - int(gl_GlobalInvocationID.y) - 1;
}
// fn calc_tangents(positions: &Vec<[f32; 3]>, tex_coords: &Vec<[f32; 2]>) -> Vec<Vec3> {
//     let mut temp = Vec::with_capacity(positions.len());
//     let tri_count = positions.len() / 3;
//     for tri_idx in 0..tri_count {
//         let idx = tri_idx * 3;

//         let v1 = positions[idx];
//         let v2 = positions[idx + 1];
//         let v3 = positions[idx + 2];

//         let w1 = tex_coords[idx];
//         let w2 = tex_coords[idx + 1];
//         let w3 = tex_coords[idx + 2];

//         let x1 = v2[0] - v1[0];
//         let x2 = v3[0] - v1[0];
//         let y1 = v2[1] - v1[1];
//         let y2 = v3[1] - v1[1];
//         let z1 = v2[2] - v1[2];
//         let z2 = v3[2] - v1[2];

//         let s1 = w2[0] - w1[0];
//         let s2 = w3[0] - w1[0];
//         let t1 = w2[1] - w1[1];
//         let t2 = w3[1] - w1[1];

//         let r = 1.0 / (s1 * t2 - s2 * t1);

//         let s = vec3(
//             (t2 * x1 - t1 * x2) * r,
//             (t2 * y1 - t1 * y2) * r,
//             (t2 * z1 - t1 * z2) * r,
//         );
//         let t = vec3(
//             (s1 * x2 - s2 * x1) * r,
//             (s1 * y2 - s2 * y1) * r,
//             (s1 * z2 - s2 * z1) * r,
//         );
//         temp.push((s, t));
//     }

//     vec![]
// }
