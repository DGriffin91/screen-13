#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants { layout(offset = 0) uint stride; } push_constants;

layout(set = 0, binding = 0, std430) restrict writeonly buffer BGRBuffer {
    uint bgr_buffer[];
};

layout(set = 0, binding = 1, rgba8ui) readonly uniform uimage2D image;

uint pack(uint v0, uint v1, uint v2, uint v3) {
    return (v3 << 24) | (v2 << 16) | (v1 << 8) | v0;
}

void main() {
    uint x = gl_GlobalInvocationID.x << 2;
    uint y = imageSize(image).y - gl_GlobalInvocationID.y - 1;

    uvec4 rgba[4];
    rgba[0] = imageLoad(image, ivec2(x, y));
    rgba[1] = imageLoad(image, ivec2(++x, y));
    rgba[2] = imageLoad(image, ivec2(++x, y));
    rgba[3] = imageLoad(image, ivec2(++x, y));

    uint index = 3 * gl_GlobalInvocationID.x +
                 push_constants.stride * gl_GlobalInvocationID.y;

    bgr_buffer[index] = pack(rgba[0].b, rgba[0].g, rgba[0].r, rgba[1].b);
    bgr_buffer[++index] = pack(rgba[1].g, rgba[1].r, rgba[2].b, rgba[2].g);
    bgr_buffer[++index] = pack(rgba[2].r, rgba[3].b, rgba[3].g, rgba[3].r);
}
