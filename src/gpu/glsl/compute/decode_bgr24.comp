#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants { layout(offset = 0) uint stride; }
push_constants;

layout(set = 0, binding = 0, std430) readonly buffer BGRBuffer {
    uint bgr_buffer[];
};

layout(set = 0, binding = 1, rgba8ui) restrict writeonly uniform uimage2D image;

uint shift(uint packed, uint bits) { return (packed >> bits) & 0xff; }

void main() {
    uint index = 3 * gl_GlobalInvocationID.x +
                 push_constants.stride * gl_GlobalInvocationID.y;

    uint bgr4[3];
    bgr4[0] = bgr_buffer[index];
    bgr4[1] = bgr_buffer[++index];
    bgr4[2] = bgr_buffer[++index];

    int x4 = int(gl_GlobalInvocationID.x) << 2;
    int y = imageSize(image).y - int(gl_GlobalInvocationID.y) - 1;

    imageStore(
        image, ivec2(x4, y),
        uvec4(shift(bgr4[0], 16), shift(bgr4[0], 8), shift(bgr4[0], 0), 0xff));
    imageStore(
        image, ivec2(++x4, y),
        uvec4(shift(bgr4[1], 8), shift(bgr4[1], 0), shift(bgr4[0], 24), 0xff));
    imageStore(
        image, ivec2(++x4, y),
        uvec4(shift(bgr4[2], 0), shift(bgr4[1], 24), shift(bgr4[1], 16), 0xff));
    imageStore(
        image, ivec2(++x4, y),
        uvec4(shift(bgr4[2], 24), shift(bgr4[2], 16), shift(bgr4[2], 8), 0xff));
}
