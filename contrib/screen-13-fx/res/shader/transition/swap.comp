#version 460 core

// Adapted from:
// https://github.com/gl-transitions/gl-transitions/blob/master/transitions/
// b62319705bc54ab2597c36a3694c2476f8f52495
//
// Author:gre
// License: MIT

#include "_defs.glsl"

layout(push_constant) uniform PushConstants {
    layout(offset = 0) float progress;
    layout(offset = 4) float reflection; // = 0.4
    layout(offset = 8) float perspective; // = 0.2
    layout(offset = 12) float depth; // = 3.0
} push_const;

const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
const vec2 boundMin = vec2(0.0, 0.0);
const vec2 boundMax = vec2(1.0, 1.0);
 
bool inBounds (vec2 p) {
  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));
}
 
vec2 project (vec2 p) {
  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);
}
 
vec4 bgColor (vec2 p, vec2 pfr, vec2 pto) {
  vec4 c = black;
  pfr = project(pfr);
  if (inBounds(pfr)) {
    c += mix(black, getFromColor(pfr), push_const.reflection * mix(1.0, 0.0, pfr.y));
  }
  pto = project(pto);
  if (inBounds(pto)) {
    c += mix(black, getToColor(pto), push_const.reflection * mix(1.0, 0.0, pto.y));
  }
  return c;
}
 
vec4 transition(vec2 p) {
  vec2 pfr, pto = vec2(-1.);
 
  float size = mix(1.0, push_const.depth, push_const.progress);
  float persp = push_const.perspective * push_const.progress;
  pfr = (p + vec2(-0.0, -0.5)) * vec2(size/(1.0-push_const.perspective*push_const.progress), size/(1.0-size*persp*p.x)) + vec2(0.0, 0.5);
 
  size = mix(1.0, push_const.depth, 1.-push_const.progress);
  persp = push_const.perspective * (1.-push_const.progress);
  pto = (p + vec2(-1.0, -0.5)) * vec2(size/(1.0-push_const.perspective*(1.0-push_const.progress)), size/(1.0-size*persp*(0.5-p.x))) + vec2(1.0, 0.5);

  if (push_const.progress < 0.5) {
    if (inBounds(pfr)) {
      return getFromColor(pfr);
    }
    if (inBounds(pto)) {
      return getToColor(pto);
    }  
  }
  if (inBounds(pto)) {
    return getToColor(pto);
  }
  if (inBounds(pfr)) {
    return getFromColor(pfr);
  }
  return bgColor(p, pfr, pto);
}

#include "_main.glsl"
